import './polyfills.server.mjs';
var j=Object.defineProperty,m=Object.defineProperties;var u=Object.getOwnPropertyDescriptors;var n=Object.getOwnPropertySymbols,v=Object.getPrototypeOf,I=Object.prototype.hasOwnProperty,N=Object.prototype.propertyIsEnumerable,w=Reflect.get;var i=(P,_)=>(_=Symbol[P])?_:Symbol.for("Symbol."+P),E=P=>{throw TypeError(P)};var G=(P,_,a)=>_ in P?j(P,_,{enumerable:!0,configurable:!0,writable:!0,value:a}):P[_]=a,R=(P,_)=>{for(var a in _||={})I.call(_,a)&&G(P,a,_[a]);if(n)for(var a of n(_))N.call(_,a)&&G(P,a,_[a]);return P},U=(P,_)=>m(P,u(_));var Y=(P=>typeof require<"u"?require:typeof Proxy<"u"?new Proxy(P,{get:(_,a)=>(typeof require<"u"?require:_)[a]}):P)(function(P){if(typeof require<"u")return require.apply(this,arguments);throw Error('Dynamic require of "'+P+'" is not supported')});var g=(P,_)=>{var a={};for(var e in P)I.call(P,e)&&_.indexOf(e)<0&&(a[e]=P[e]);if(P!=null&&n)for(var e of n(P))_.indexOf(e)<0&&N.call(P,e)&&(a[e]=P[e]);return a};var K=(P,_)=>()=>(P&&(_=P(P=0)),_);var k=(P,_)=>()=>(_||P((_={exports:{}}).exports,_),_.exports);var l=(P,_,a)=>w(v(P),a,_);var q=(P,_,a)=>new Promise((e,b)=>{var t=A=>{try{p(a.next(A))}catch(r){b(r)}},c=A=>{try{p(a.throw(A))}catch(r){b(r)}},p=A=>A.done?e(A.value):Promise.resolve(A.value).then(t,c);p((a=a.apply(P,_)).next())}),d=function(P,_){this[0]=P,this[1]=_},x=(P,_,a)=>{var e=(c,p,A,r)=>{try{var o=a[c](p),s=(p=o.value)instanceof d,f=o.done;Promise.resolve(s?p[0]:p).then(h=>s?e(c==="return"?c:"next",p[1]?{done:h.done,value:h.value}:h,A,r):A({value:h,done:f})).catch(h=>e("throw",h,A,r))}catch(h){r(h)}},b=c=>t[c]=p=>new Promise((A,r)=>e(c,p,A,r)),t={};return a=a.apply(P,_),t[i("asyncIterator")]=()=>t,b("next"),b("throw"),b("return"),t},y=P=>{var _=P[i("asyncIterator")],a=!1,e,b={};return _==null?(_=P[i("iterator")](),e=t=>b[t]=c=>_[t](c)):(_=_.call(P),e=t=>b[t]=c=>{if(a){if(a=!1,t==="throw")throw c;return c}return a=!0,{done:!1,value:new d(new Promise(p=>{var A=_[t](c);A instanceof Object||E("Object expected"),p(A)}),1)}}),b[i("iterator")]=()=>b,e("next"),"throw"in _?e("throw"):b.throw=t=>{throw t},"return"in _&&e("return"),b},z=(P,_,a)=>(_=P[i("asyncIterator")])?_.call(P):(P=P[i("iterator")](),_={},a=(e,b)=>(b=P[e])&&(_[e]=t=>new Promise((c,p,A)=>(t=b.call(P,t),A=t.done,Promise.resolve(t.value).then(r=>c({value:r,done:A}),p)))),a("next"),a("return"),_);var L=K(()=>{});export{R as a,U as b,Y as c,g as d,k as e,l as f,q as g,d as h,x as i,y as j,z as k,L as l};
